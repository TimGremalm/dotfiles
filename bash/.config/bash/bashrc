
#Enable a more color rich terminal experience
export TERM="xterm-256color"

#Include common aliases from dotfiles
if [ -f ~/.config/bash/bash_aliases ]; then
	. ~/.config/bash/bash_aliases
fi

#Include development environments
if [ -f ~/.config/bash/bash_aliases ]; then
	. ~/.config/bash/bash_aliases
fi

#Enables terminal to handle Ctrl+S, first check if interactive shell
if [ "$-" ]; then # term test?
	# Turn off TTY "start" and "stop" commands in all interactive shells.
	# They default to C-q and C-s, Bash uses C-s to do a forward history search.
	stty start ''
	stty stop  ''
	stty -ixon -ixoff # disable XON/XOFF flow control
	stty ixoff # enable sending (to app) of start/stop characters
	stty ixany # let any character restart output, not only start character
fi

#Change that strong blue to mild when listing directories
LS_COLORS=$LS_COLORS:'di=0;96:'
export LS_COLORS

export editor='vim'
export EDITOR='vim'

#Enable vi-editor-mode in bash
set -o vi

# Powerline prompt PS1
PROMPT_COMMAND=__prompt_command # Func to gen PS1 after CMDs
__prompt_command() {
	local EXIT="$?"
	PS1=""
	local BRANCH=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
	local ResetFormat='\[\e[0m\]'
	# EsacapeType;5;ColorEndesacpe
	# Foreground Blue \[\e\[38;5;4m\]
	# Background Cyan \[\e\[48;5;5m\]
	if [ -z ${HostBG+x} ]; then local HostBG='\[\e[48;5;166m\]'; fi
	if [ -z ${HostFG+x} ]; then local HostFG='\[\e[38;5;166m\]'; fi
	if [ -z ${HostTX+x} ]; then local HostTX='\[\e[38;5;215m\]'; fi
	if [ -z ${UserBG+x} ]; then local UserBG='\[\e[48;5;31m\]'; fi
	if [ -z ${UserFG+x} ]; then local UserFG='\[\e[38;5;31m\]'; fi
	if [ -z ${UserTX+x} ]; then local UserTX='\[\e[38;5;117m\]'; fi
	if [ -z ${BranchBG+x} ]; then local BranchBG='\[\e[48;5;236m\]'; fi
	if [ -z ${BranchFG+x} ]; then local BranchFG='\[\e[38;5;236m\]'; fi
	if [ -z ${BranchTX+x} ]; then local BranchTX='\[\e[38;5;244m\]'; fi
	if [ -z ${CurdirBG+x} ]; then local CurdirBG='\[\e[48;5;240m\]'; fi
	if [ -z ${CurdirFG+x} ]; then local CurdirFG='\[\e[38;5;240m\]'; fi
	if [ -z ${CurdirTX+x} ]; then local CurdirTX='\[\e[38;5;249m\]'; fi
	if [ -z ${ExitcodeBG+x} ]; then local ExitcodeBG='\[\e[48;5;52m\]'; fi
	if [ -z ${ExitcodeFG+x} ]; then local ExitcodeFG='\[\e[38;5;52m\]'; fi
	if [ -z ${ExitcodeTX+x} ]; then local ExitcodeTX='\[\e[38;5;211m\]'; fi
	# Hostname
	PS1+="${HostBG}${HostTX}"
	PS1+=" ⌂ \h "
	PS1+="${HostFG}"
	# Username
	PS1+="${UserBG}${UserTX}"
	PS1+=" \u "
	PS1+="${UserFG}"
	# Git branch
	if [ ! "${BRANCH}" == "" ]; then
		PS1+="${BranchBG}${BranchTX}"
		PS1+="  $BRANCH "
		PS1+="${BranchFG}"
	fi
	# Current directory
	PS1+="${CurdirBG}${CurdirTX}"
	PS1+=" \w "
	PS1+="${CurdirFG}"
	# If we have a non zero exit code, write it out
	if [ $EXIT != 0 ]; then
		PS1+="${ExitcodeBG}${ExitcodeTX}"
		PS1+=" $EXIT "
		PS1+="${ExitcodeFG}"
	fi
	# Reset formating, and end prompt with a space
	if [ $EXIT != 0 ]; then
		PS1+="${ResetFormat}${ExitcodeFG} ${ResetFormat}"
	else
		PS1+="${ResetFormat}${CurdirFG} ${ResetFormat}"
	fi
}

#Local binaries
export PATH=$PATH:$HOME/.local/bin

#GCC, NRF, Segger toolchain PATH
#export PATH=$PATH:/usr/share/segger_embedded_studio_for_arm_3.40/bin
#export PATH=$PATH:$HOME/build/gcc-arm-none-eabi-7-2017-q4-major/bin
#export PATH=$PATH:$HOME/build/nrfjprog
#export PATH=$PATH:$HOME/build/mergehex
#export PATH=$PATH:$HOME/build/cmake-3.12.0-rc1/bin
#export SDK_ROOT=/home/timgremalm/projects/til-firmware/nRF5_SDK_15.0.0_a53641a

#Atmel sam-ba flasher
#export PATH=$PATH:$HOME/build/sam-ba_3.2.1
#export PATH=$PATH:$HOME/build/sam-ba_3.2.3

# ESP32 toolchain esp-idf
#export IDF_PATH=$HOME/build/esp-idf
##export PATH="${IDF_PATH}/tools:${PATH}"
##export PATH="${IDF_PATH}/components/esptool_py/esptool:${PATH}"
##export PATH="${IDF_PATH}/components/espcoredump:${PATH}"
##export PATH="${IDF_PATH}/components/partition_table:${PATH}"
##export PATH="${IDF_PATH}/components/app_update:${PATH}"
## Flash parameters
#export ESPPORT=/dev/ttyS4
#export ESPBAUD=115200
## Source esp-idf environment
#alias get_idf='. $HOME/build/esp-idf/export.sh'
#alias erase_flash='$IDF_PATH/components/esptool_py/esptool/esptool.py -p $ESPPORT -b $ESPBAUD erase_flash'

#Programs
#export PATH=$PATH:$HOME/build/eclipse/cpp-oxygen/eclipse
#export PATH=$PATH:$HOME/build/SaleaeLogic
#export PATH=$PATH:$HOME/Android/Sdk/platform-tools
#export PATH=$PATH:$HOME/Android/Sdk/tools/bin

#Stop warnings about "Couldn't register with accessibility bus"
#Even without accessibility enabled, many Gnome components try to connect to the AT-SPI bus.
export NO_AT_BRIDGE=1

#export DISPLAY=:0
#export DISPLAY=:1					X screen main
#export DISPLAY=:1.1				X screen secondary
#export DISPLAY=192.168.0.10:0.0	X screen used if SSH forwarding X window

#For adding python libraries
#export PYTHONPATH=${PYTHONPATH}:$HOME/projects/pylibs

